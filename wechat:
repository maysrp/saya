dodgepudding/wechat-php-sdk



demo:



<?php
include "./class/wechat.class.php";
include "./class/image.php";
include "./class/medoo.php";

$options = array(
		'token'=>'acgdaily', //填写你设定的key
        'encodingaeskey'=>'dXaftvvxSZ3qZcCFjajUObor8AJK5P7sMyXMhDqdSWM' //填写加密用的EncodingAESKey，如接口为明文模式可忽略
	);
$weObj = new Wechat($options);

$weObj->valid();//明文或兼容模式可以在接口验证通过后注释此句，但加密模式一定不能注释，否则会验证失败
$type = $weObj->getRev()->getRevType();//数据类型
$data= $weObj->getRev()-> getRevData();
$time= $weObj->getRev()->getRevCtime();//创建时间
switch($type) {
	case Wechat::MSGTYPE_TEXT:


			$image=new image();
			switch ($data['Content']) {
				case '最新标签':
				case '最新':
					$bkx=$image->newtag();
					$bk=array_slice($bkx,0,8);
					break;
				case '随机标签':
				case '随机':
					$bkx=$image->rdtag();
					$bk=array_slice($bkx,0,8);
					break;
				default:
					$bk=$image->wechat_tag_five($data['Content']);
					break;
			}
			foreach ($bk as $key => $value) {
				$post['Title']=$value['name'];
				$post['PicUrl']=bimage($value['id']);
				$post['Description']=date("Y/m/d",$value['time']);
				$post['Url']="https://acgdaily.com/image.php?id=".$value['id'];
				$da[]=$post;
			}
			//$url="https://acgdaily.com/image.php?id=".$bk['id'];
			//$re['Title']=
			$weObj->news($da)->reply();
			exit;
			break;
	case Wechat::MSGTYPE_EVENT:
			$weObj->text("请输入文字搜索:例如 最新 随机 loli ")->reply();

			break;
	case Wechat::MSGTYPE_IMAGE:
			$weObj->text("请输入文字搜索:例如 最新 随机 loli")->reply();

			break;
	default:
			$weObj->text("请输入文字搜索:例如 最新 随机 loli")->reply();
}
function bimage($b64){
	$ori=base64_decode($b64);
	$ori_1=str_replace(".64","", $ori);
	$ori_2=str_replace("./base64", "/show", $ori_1);
	return "https://acgdaily.com/".$ori_2;
}



valid() 验证连接，被动接口处于加密模式时必须调用
getRev() 获取微信服务器发来信息(不返回结果)，被动接口必须调用
getRevData() 返回微信服务器发来的信息（数组）
getRevFrom() 返回消息发送者的userid
getRevTo() 返回消息接收者的id（即公众号id）
getRevType() 返回接收消息的类型
getRevID() 返回消息id
getRevCtime() 返回消息发送时间
getRevContent() 返回消息内容正文或语音识别结果（文本型）
getRevPic() 返回图片信息（图片型信息） 返回数组{'mediaid'=>'','picurl'=>''}
getRevLink() 接收消息链接（链接型信息） 返回数组{'url'=>'','title'=>'','description'=>''}
getRevGeo() 返回地理位置（位置型信息） 返回数组{'x'=>'','y'=>'','scale'=>'','label'=>''}
getRevEventGeo() 返回事件地理位置（事件型信息） 返回数组{'x'=>'','y'=>'','precision'=>''}
getRevEvent() 返回事件类型（事件型信息） 返回数组{'event'=>'','key'=>''}
getRevScanInfo() 获取自定义菜单的扫码推事件信息，事件类型为scancode_push或scancode_waitmsg 返回数组array ('ScanType'=>'qrcode','ScanResult'=>'123123')
getRevSendPicsInfo() 获取自定义菜单的图片发送事件信息,事件类型为pic_sysphoto或pic_photo_or_album或pic_weixin 数组结构见php文件内方法说明
getRevSendGeoInfo() 获取自定义菜单的地理位置选择器事件推送，事件类型为location_select 数组结构见php文件内方法说明
getRevVoice() 返回语音信息（语音型信息） 返回数组{'mediaid'=>'','format'=>''}
getRevVideo() 返回视频信息（视频型信息） 返回数组{'mediaid'=>'','thumbmediaid'=>''}
getRevTicket() 返回接收TICKET（扫描带参数二维码,关注或SCAN事件） 返回二维码的ticket值
getRevSceneId() 返回二维码的场景值（扫描带参数二维码的关注事件） 返回二维码的参数值
getRevTplMsgID() 返回主动推送的消息ID（群发或模板消息事件） 返回MsgID值
getRevStatus() 返回模板消息发送状态（模板消息事件） 返回文本：success(成功)|failed:user block(用户拒绝接收)|failed: system failed(发送失败（非用户拒绝）)
getRevResult() 返回群发或模板消息发送结果（群发或模板消息事件） 返回数组，内容依事件类型而不同，参考开发文档中群发、模板消息推送事件
getRevKFCreate() 返回多客服-接入会话的客服账号（多客服-接入会话事件） 返回文本型
getRevKFClose() 返回多客服-处理会话的客服账号（多客服-接入会话事件） 返回文本型
getRevKFSwitch() 返回多客服-转接会话信息（多客服-转接会话事件） 返回数组	{'FromKfAccount' => '','ToKfAccount' => ''}
getRevCardPass() 返回卡券-审核通过的卡券ID（卡券-卡券审核事件） 返回文本型
getRevCardGet() 返回卡券-用户领取卡券的相关信息（卡券-领取卡券事件） 返回数组{'CardId' => '','IsGiveByFriend' => '','UserCardCode' => ''}
getRevCardDel() 返回卡券-用户删除卡券的相关信息（卡券-删除卡券事件） 返回数组{'CardId' => '','UserCardCode' => ''}
text($text) 设置文本型消息，参数：文本内容
image($mediaid) 设置图片型消息，参数：图片的media_id
voice($mediaid) 设置语音型消息，参数：语音的media_id
video($mediaid='',$title,$description) 设置视频型消息，参数：视频的media_id、标题、摘要
music($title,$desc,$musicurl,$hgmusicurl='',$thumbmediaid='') 设置回复音乐，参数：音乐标题、音乐描述、音乐链接、高音质链接、缩略图的媒体id
news($newsData) 设置图文型消息，参数：数组。数组结构见php文件内方法说明
Message($msg = '',$append = false) 设置发送的消息（一般不需要调用这个方法）
transfer_customer_service($customer_account = '') 转接多客服，如不指定客服可不提供参数，参数：指定客服的账号
reply() 将以上已经设置好的消息，回复给微信服务器
